openapi: "3.0.2"
info:
  title: Härtappat backend API
  version: "1.0"
servers:
  - url: http://localhost:3000/api/v1
paths:
  /countries:
    get:
      summary: Get a list of known countries.
      description: Returns a list of known countries in the database. Used to ensure that countries are spelled consistently.
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Country'
    post:
      summary: Adds one country to the list of known countries
      description: Adds one country to the list of known countries.
      requestBody:
        required: true
        description: One country to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Country'
      responses:
        200:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Country'


  /grapes:
    get:
      description: Returns a list of the grapes in the database. Currently the length of the list is unlimited; that may change.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Grape'
    post:
      summary: Create a new grape
      description: Creates a new grape with the provided details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Grape'
      responses:
        '201':
          description: Grape created successfully.  The response includes the ID of the newly created grape.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Grape' # TODO: Se till att koden returnerar skapad druva.



    patch: # TODO: Peka ut druvan med Primary key, inte namn.
      deprecated: true # TODO: Implementera patch by id
      summary: Change an existing grape
      description: Change the details of an existing grape, without changing the identity
      responses:
        '200':
          description: Successful patch of grape # TODO describe PATCH grape
    delete:
      deprecated: true # TODO: Implementera delete by id
      responses:
        '200':
          description: successful deletion of grape by name# TODO describe DELETE grape

  /grapes/{id}:
    get:
      summary: Returns a grape by id
      description: Returns a grape by id, with details
      responses:
        '400':
          description: GET operation failed
        '200':
          description: Successful GET operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Grape'
    patch:
      summary: Change a grape identified by id
      description: Change the details of a grape, identified by its id.
      parameters:
        - name: id
          in: path
          description: ID of the grape to change
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Grape'
      responses:
        '404':
          description: Grape not found
        '200':
          description: Grape changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Grape'

    delete:
      summary: Delete a grape by id
      description: Delete a grape by id
      parameters:
        - name: id
          in: path
          description: ID of the grape to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: Grape not found
        '204':
          description: Grape deleted successfully

  /members:
    get:
      description: Returns a list of the members of the club.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    Given:
                      type: string
                      example: Helge
                    Efternamn:
                      type: string
                      example: Stenström
  /tasting:
    get:
      description: Returns a list of all tastings
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tasting'
  /tasting/{id}:
    get:
      description: Returns information about one wine tasting
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasting'
  /wines:
    get:
      description: Returns a list of the wines in the database. Currently the length of the list is unlimited; that may change.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - name
                  properties:
                    name:
                      type: string
                      description: The name of the wine, as stated by Systembolaget or by the label.
                    country:
                      type: string
                      description: The name of the country of origin, in Swedish
                    category:
                      type: string
                      description: The currently used categories are 'rött', 'rosé' and 'vitt'.
                    systembolaget:
                      description: The item product number used by Systembolaget.
                      type: integer
    post:
      summary: Adds a wine to the database.
      requestBody:
        description: a wine with properties in textual form
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Wine'
      responses:
        201:
          description: Created

  /wines/{id}:
    get:
      summary: Returns a wine by id
      description: Returns a wine by id, with details
      responses:
        '404':
          description: GET operation failed, wine not found
        '200':
          description: Successful GET operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wine'
    delete:
      summary: Deletes a wine from the database
      description: Deletes a wine by its ID, from the database
      parameters:
        - name: id
          in: path
          description: ID of the wine to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: Wine not found
        '204':
          description: Wine deleted successfully


components:
  schemas:
    Grape:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the grape
        name:
          description: The name of the grape.
          type: string
          example: Rondo
        color:
          description: The color of the grape, in Swedish. One of 'grön' or 'blå'.
          type: string
          example: blå
      required:
        - name
    Member:
      type: object
      properties:
        id:
          type: integer
        Given:
          type: string
          example: Helge
        Efternamn:
          type: string
          example: Stenström
    Tasting:
      type: object
      required:
        - titel
      properties:
        titel:
          type: string
          example: 'Röda viner från Danmark'
        notes:
          type: string
          example: 'Vi provade viner som vi drack i somras. Det var jättetrevligt. Jag skriver mer senare.'
        date:
          type: string
          description: The date the tasting was taking place. In ISO notation.
          example: 2023-01-06
        hosts:
          type: string
          example: Åke och Åsa
    Wine:
      type: object
      properties:
        name:
          type: string
          example: Liebfraumilch
    Country:
      type: string
      example: Österrike
    WineType:
      type: string
